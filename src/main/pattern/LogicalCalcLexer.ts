// Generated from src/main/pattern/LogicalCalc.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class LogicalCalcLexer extends Lexer {
	public static readonly VARIABLES = 1;
	public static readonly TRUE = 2;
	public static readonly FALSE = 3;
	public static readonly LPAREN = 4;
	public static readonly RPAREN = 5;
	public static readonly IFF_OPERATOR = 6;
	public static readonly IF_OPERATOR = 7;
	public static readonly OR_OPERATOR = 8;
	public static readonly AND_OPERATOR = 9;
	public static readonly NOT_OPERATOR = 10;
	public static readonly WS = 11;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"VARIABLES", "TRUE", "FALSE", "LPAREN", "RPAREN", "IFF_OPERATOR", "IF_OPERATOR", 
		"OR_OPERATOR", "AND_OPERATOR", "NOT_OPERATOR", "WS",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, "'('", "')'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "VARIABLES", "TRUE", "FALSE", "LPAREN", "RPAREN", "IFF_OPERATOR", 
		"IF_OPERATOR", "OR_OPERATOR", "AND_OPERATOR", "NOT_OPERATOR", "WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(LogicalCalcLexer._LITERAL_NAMES, LogicalCalcLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return LogicalCalcLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(LogicalCalcLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "LogicalCalc.g4"; }

	// @Override
	public get ruleNames(): string[] { return LogicalCalcLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return LogicalCalcLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return LogicalCalcLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return LogicalCalcLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\r~\b\x01\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x03\x02\x03" +
		"\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03" +
		"\x03\x03\x03\x03\x03\x03\x03\x03\x03\x05\x03)\n\x03\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x04\x05\x04;\n\x04\x03\x05\x03\x05\x03" +
		"\x06\x03\x06\x03\x07\x03\x07\x05\x07C\n\x07\x03\x07\x03\x07\x03\x07\x03" +
		"\x07\x03\x07\x03\x07\x05\x07K\n\x07\x05\x07M\n\x07\x03\b\x05\bP\n\b\x03" +
		"\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x05\b\\\n\b\x03" +
		"\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x05\tf\n\t\x05\th\n\t\x03" +
		"\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x05\nu" +
		"\n\n\x05\nw\n\n\x03\v\x03\v\x03\f\x03\f\x03\f\x03\f\x02\x02\x02\r\x03" +
		"\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t" +
		"\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x03\x02\x06\x03\x02C\\\x04\x02" +
		"//??\x04\x02##\x80\x80\x04\x02\v\v\"\"\x02\x91\x02\x03\x03\x02\x02\x02" +
		"\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02" +
		"\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02" +
		"\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02" +
		"\x17\x03\x02\x02\x02\x03\x19\x03\x02\x02\x02\x05(\x03\x02\x02\x02\x07" +
		":\x03\x02\x02\x02\t<\x03\x02\x02\x02\v>\x03\x02\x02\x02\rL\x03\x02\x02" +
		"\x02\x0F[\x03\x02\x02\x02\x11g\x03\x02\x02\x02\x13v\x03\x02\x02\x02\x15" +
		"x\x03\x02\x02\x02\x17z\x03\x02\x02\x02\x19\x1A\t\x02\x02\x02\x1A\x04\x03" +
		"\x02\x02\x02\x1B\x1C\x07v\x02\x02\x1C\x1D\x07t\x02\x02\x1D\x1E\x07w\x02" +
		"\x02\x1E)\x07g\x02\x02\x1F \x07V\x02\x02 !\x07t\x02\x02!\"\x07w\x02\x02" +
		"\")\x07g\x02\x02#$\x07V\x02\x02$%\x07T\x02\x02%&\x07W\x02\x02&)\x07G\x02" +
		"\x02\')\x073\x02\x02(\x1B\x03\x02\x02\x02(\x1F\x03\x02\x02\x02(#\x03\x02" +
		"\x02\x02(\'\x03\x02\x02\x02)\x06\x03\x02\x02\x02*+\x07h\x02\x02+,\x07" +
		"c\x02\x02,-\x07n\x02\x02-.\x07u\x02\x02.;\x07g\x02\x02/0\x07H\x02\x02" +
		"01\x07c\x02\x0212\x07n\x02\x0223\x07u\x02\x023;\x07g\x02\x0245\x07H\x02" +
		"\x0256\x07C\x02\x0267\x07N\x02\x0278\x07U\x02\x028;\x07G\x02\x029;\x07" +
		"2\x02\x02:*\x03\x02\x02\x02:/\x03\x02\x02\x02:4\x03\x02\x02\x02:9\x03" +
		"\x02\x02\x02;\b\x03\x02\x02\x02<=\x07*\x02\x02=\n\x03\x02\x02\x02>?\x07" +
		"+\x02\x02?\f\x03\x02\x02\x02@B\x07>\x02\x02AC\t\x03\x02\x02BA\x03\x02" +
		"\x02\x02BC\x03\x02\x02\x02CD\x03\x02\x02\x02DM\x07@\x02\x02EF\x07k\x02" +
		"\x02FG\x07h\x02\x02GH\x07h\x02\x02HJ\x03\x02\x02\x02IK\x070\x02\x02JI" +
		"\x03\x02\x02\x02JK\x03\x02\x02\x02KM\x03\x02\x02\x02L@\x03\x02\x02\x02" +
		"LE\x03\x02\x02\x02M\x0E\x03\x02\x02\x02NP\t\x03\x02\x02ON\x03\x02\x02" +
		"\x02OP\x03\x02\x02\x02PQ\x03\x02\x02\x02Q\\\x07@\x02\x02RS\x07k\x02\x02" +
		"S\\\x07h\x02\x02TU\x07k\x02\x02UV\x07o\x02\x02VW\x07r\x02\x02WX\x07n\x02" +
		"\x02XY\x07k\x02\x02YZ\x07g\x02\x02Z\\\x07u\x02\x02[O\x03\x02\x02\x02[" +
		"R\x03\x02\x02\x02[T\x03\x02\x02\x02\\\x10\x03\x02\x02\x02]^\x07q\x02\x02" +
		"^h\x07t\x02\x02_`\x07Q\x02\x02`h\x07t\x02\x02ab\x07Q\x02\x02bh\x07T\x02" +
		"\x02ce\x07~\x02\x02df\x07~\x02\x02ed\x03\x02\x02\x02ef\x03\x02\x02\x02" +
		"fh\x03\x02\x02\x02g]\x03\x02\x02\x02g_\x03\x02\x02\x02ga\x03\x02\x02\x02" +
		"gc\x03\x02\x02\x02h\x12\x03\x02\x02\x02ij\x07c\x02\x02jk\x07p\x02\x02" +
		"kw\x07f\x02\x02lm\x07C\x02\x02mn\x07p\x02\x02nw\x07f\x02\x02op\x07C\x02" +
		"\x02pq\x07P\x02\x02qw\x07F\x02\x02rt\x07(\x02\x02su\x07(\x02\x02ts\x03" +
		"\x02\x02\x02tu\x03\x02\x02\x02uw\x03\x02\x02\x02vi\x03\x02\x02\x02vl\x03" +
		"\x02\x02\x02vo\x03\x02\x02\x02vr\x03\x02\x02\x02w\x14\x03\x02\x02\x02" +
		"xy\t\x04\x02\x02y\x16\x03\x02\x02\x02z{\t\x05\x02\x02{|\x03\x02\x02\x02" +
		"|}\b\f\x02\x02}\x18\x03\x02\x02\x02\x0E\x02(:BJLO[egtv\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!LogicalCalcLexer.__ATN) {
			LogicalCalcLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(LogicalCalcLexer._serializedATN));
		}

		return LogicalCalcLexer.__ATN;
	}

}

